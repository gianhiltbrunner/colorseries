{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","selected","color_array","handleClick","bind","assertThisInitialized","handleMinus","handlePlus","e","preventDefault","setState","scheme","target","parentElement","id","palette_out","palette","string","join","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","_this2","colors","map","react_default","a","className","Button","onClick","i","tooltip","Tooltip","col_spans","col","backgroundColor","width","OverlayTrigger","placement","overlay","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40bdf393.chunk.js","sourcesContent":["//Updtae palette.js\nimport React, { Component } from 'react'\nimport './App.css'\nimport palette from 'google-palette'\nimport { Button, Tooltip, OverlayTrigger } from 'react-bootstrap'\n\nclass App extends Component {\n  constructor(){\n    super()\n\n    this.state = { value: 6, selected: null, color_array: null };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMinus = this.handleMinus.bind(this);\n    this.handlePlus = this.handlePlus.bind(this);\n  }\n  handlePlus(e){\n    e.preventDefault()\n    this.setState({value: this.state.value + 1,selected: null})\n  }\n  handleMinus(e){\n    e.preventDefault()\n    this.setState({value: this.state.value - 1,selected: null})\n  }\n  handleClick(e){\n    const scheme = e.target.parentElement.parentElement.id\n    const palette_out = palette(scheme, this.state.value)\n    if (palette_out) {\n      const string = ('\\'#' + palette_out.join('\\',\\'#') + '\\'')\n      this.setState({selected: scheme})\n      this.setState({color_array: string})\n\n      const copyToClipboard = str => {\n        const el = document.createElement('textarea');\n        el.value = str;\n        el.setAttribute('readonly', '');\n        el.style.position = 'absolute';\n        el.style.left = '-9999px';\n        document.body.appendChild(el);\n        el.select();\n        document.execCommand('copy');\n        document.body.removeChild(el);\n      };\n      copyToClipboard(string)\n    }\n  }\n  render() {\n    const schemes = ['rainbow','cb-YlGn','cb-YlGnBu','cb-GnBu','cb-BuGn','cb-PuBuGn','cb-PuBu','cb-BuPu','cb-RdPu','cb-PuRd','cb-OrRd','cb-YlOrRd','cb-YlOrBr','cb-Purples','cb-Blues','cb-Greens','cb-Oranges','cb-Reds','cb-Greys','cb-PuOr','cb-BrBG','cb-PRGn','cb-PiYG','cb-RdBu','cb-RdGy','cb-RdYlBu','cb-Spectral','cb-RdYlGn','cb-Accent','cb-Dark2','cb-Paired','cb-Pastel1','cb-Pastel2','cb-Set1','cb-Set2','cb-Set3','sol-base','sol-accent']\n    const colors = schemes.map(scheme => [scheme,palette(scheme, this.state.value)]);\n\n    return (\n      <div className=\"App\">\n        <h2>ColorSchemes</h2>\n        <h4>Select the number of colors you need and click on your favorite scheme to copy the code for R and Python to your clipboard.</h4>\n        <form>\n        <Button onClick={(e) => this.handleMinus(e)}>-</Button>  {this.state.value}  <Button onClick={(e) => this.handlePlus(e)}>+</Button>\n        </form>\n        <br></br>\n        <br></br>\n        <table>\n        {colors.map((scheme,i) => {\n          if (scheme[1]){\n              const code_string = ''\n              const tooltip = (\n                <Tooltip id=\"tooltip\">\n                  Copied to clipboard!\n                </Tooltip>\n              );\n\n              const col_spans = scheme[1].map((col) => {\n                col = '#' + col\n                return <span style={{backgroundColor: col, width: 60}}></span>\n              })\n              if (this.state.selected === scheme[0]) {\n                // return <tr id={scheme[0]} onClick={(e) => this.handleClick(e)}><td><div>{scheme[0]}</div></td> <td>{col_spans}<br></br>{this.state.color_array}</td></tr>\n                return (<OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n                  <tr id={scheme[0]} onClick={(e) => this.handleClick(e)}><td></td> <td>{col_spans}</td></tr>\n                </OverlayTrigger>)\n              }\n              else {\n                return <tr id={scheme[0]} onClick={(e) => this.handleClick(e)}><td></td> <td>{col_spans}</td></tr>\n              }\n\n          }\n        })}\n        </table>\n      <p>Based on <a href=\"https://github.com/google/palette.js\">palette.js.</a></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//<input type='number' style={{width: 30}} value={this.state.value} onChange={(e) => {this.handleChange(e)}}/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}